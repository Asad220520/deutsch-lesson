import React, { useState, useEffect } from "react";
import WordCard from "./WordCard";
import { doc, updateDoc, getDoc } from "firebase/firestore";
import { db } from "../../firebase";

export default function WordList({ words = [], lessonId }) {
  const [filter, setFilter] = useState("all");
  const [search, setSearch] = useState("");
  const [wordList, setWordList] = useState([]);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–ø—Å–∞ words
  useEffect(() => {
    setWordList(
      words.map((w) => ({
        ...w,
        status: w.status || "learn",
      }))
    );
  }, [words]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–ª–æ–≤–∞ –≤ Firebase –≤ –º–∞—Å—Å–∏–≤–µ words –≤–Ω—É—Ç—Ä–∏ —É—Ä–æ–∫–∞
  const handleStatusChange = async (index, newStatus) => {
    const updatedWords = [...wordList];
    updatedWords[index].status = newStatus;
    setWordList(updatedWords);

    if (!lessonId) {
      console.error("lessonId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–µ –º–æ–≥—É –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å");
      return;
    }

    try {
      const lessonRef = doc(db, "lessons", lessonId);
      const lessonSnap = await getDoc(lessonRef);
      if (!lessonSnap.exists()) {
        console.error("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–ª–æ–≤–∞");
        return;
      }

      const lessonData = lessonSnap.data();
      const wordsArray = lessonData.words || [];

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω—É–∂–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
      const newWordsArray = wordsArray.map((word, i) =>
        i === index ? { ...word, status: newStatus } : word
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ Firestore
      await updateDoc(lessonRef, {
        words: newWordsArray,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:", error);
    }
  };

  const filtered = wordList.filter((w) => {
    const matchesStatus = filter === "all" ? true : w.status === filter;
    const matchesSearch =
      w.de.toLowerCase().includes(search.toLowerCase()) ||
      w.ru.toLowerCase().includes(search.toLowerCase());
    return matchesStatus && matchesSearch;
  });

  return (
    <div className="space-y-4">
      <input
        type="text"
        placeholder="–ü–æ–∏—Å–∫ —Å–ª–æ–≤..."
        value={search}
        onChange={(e) => setSearch(e.target.value)}
        className="w-full p-2 border rounded mb-4"
      />

      <div className="flex flex-wrap gap-2 mb-4">
        {["all", "learn", "learned", "repeat"].map((f) => (
          <button
            key={f}
            onClick={() => setFilter(f)}
            className={`px-3 py-1 rounded ${
              filter === f ? "bg-indigo-600 text-white" : "bg-gray-200"
            }`}
          >
            {f === "all"
              ? "–í—Å–µ"
              : f === "learn"
              ? "üß† –ò–∑—É—á–∞—é"
              : f === "learned"
              ? "‚úÖ –í—ã—É—á–µ–Ω–æ"
              : "üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å"}
          </button>
        ))}
      </div>

      <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
        {filtered.map((word, index) => (
          <WordCard
            key={word.id || index}
            word={word}
            index={index}
            onStatusChange={(newStatus) => handleStatusChange(index, newStatus)}
          />
        ))}
      </div>
    </div>
  );
}
