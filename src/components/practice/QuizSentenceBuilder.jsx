import React, { useState, useEffect } from "react";

export default function QuizSentenceBuilder({ sentence, onNext }) {
  const [shuffledWords, setShuffledWords] = useState([]);
  const [selectedWords, setSelectedWords] = useState([]);

  useEffect(() => {
    setShuffledWords(shuffleArray(sentence.words));
    setSelectedWords([]);
  }, [sentence]);

  // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞
  function shuffleArray(array) {
    return array
      .map((value) => ({ value, sort: Math.random() }))
      .sort((a, b) => a.sort - b.sort)
      .map(({ value }) => value);
  }

  // –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º —Å–ª–æ–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ–≤
  const handleDragStart = (e, word, source) => {
    e.dataTransfer.setData("text/plain", word);
    e.dataTransfer.setData("source", source);
  };

  // –†–∞–∑—Ä–µ—à–∞–µ–º —Å–±—Ä–æ—Å
  const handleDragOver = (e) => e.preventDefault();

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ
  const handleDrop = (e) => {
    e.preventDefault();
    const word = e.dataTransfer.getData("text/plain");
    const source = e.dataTransfer.getData("source");

    if (source === "shuffled") {
      setSelectedWords([...selectedWords, word]);
      setShuffledWords(shuffledWords.filter((w) => w !== word));
    } else if (source === "selected") {
      // –ü–æ–∑–≤–æ–ª–∏–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞—Ç—å —Å–ª–æ–≤–∞ –≤–Ω—É—Ç—Ä–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏
    }
  };

  // –£–¥–∞–ª—è–µ–º —Å–ª–æ–≤–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å–ø–∏—Å–æ–∫
  const removeWord = (word) => {
    setSelectedWords(
      selectedWords.filter((w, i) => i !== selectedWords.indexOf(word))
    );
    setShuffledWords([...shuffledWords, word]);
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  const handleSubmit = () => {
    if (selectedWords.join(" ") === sentence.text) {
      alert("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!");
      onNext();
    } else {
      alert("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ.");
    }
  };

  // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Å–ª–æ–≤–æ –≤–Ω—É—Ç—Ä–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö (drag and drop reorder)
  const handleDropOnSelected = (e, index) => {
    e.preventDefault();
    const draggedWord = e.dataTransfer.getData("text/plain");
    const source = e.dataTransfer.getData("source");

    if (source === "selected") {
      const draggedIndex = selectedWords.indexOf(draggedWord);
      if (draggedIndex === -1) return;

      let newSelected = [...selectedWords];
      newSelected.splice(draggedIndex, 1); // —É–¥–∞–ª—è–µ–º —Å –ø—Ä–æ—à–ª–æ–π –ø–æ–∑–∏—Ü–∏–∏
      newSelected.splice(index, 0, draggedWord); // –≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—É—é
      setSelectedWords(newSelected);
    }
  };

  return (
    <div className="p-4 border rounded shadow space-y-4 max-w-xl mx-auto">
      <h2 className="text-xl font-bold mb-4">–°–æ–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:</h2>

      {sentence.translation ? (
        <p className="italic text-gray-700 mb-4">
          –ü–µ—Ä–µ–≤–æ–¥: {sentence.translation}
        </p>
      ) : (
        <p className="italic text-gray-500 mb-4">üõà –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</p>
      )}

      {/* –°–ª–æ–≤–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ */}
      <div className="flex flex-wrap gap-2 mb-4 border p-3 rounded min-h-[50px]">
        {shuffledWords.length === 0 && <i>–í—Å–µ —Å–ª–æ–≤–∞ –≤—ã–±—Ä–∞–Ω—ã</i>}
        {shuffledWords.map((word, i) => (
          <div
            key={i}
            draggable
            onDragStart={(e) => handleDragStart(e, word, "shuffled")}
            className="cursor-move bg-gray-200 px-3 py-1 rounded select-none"
          >
            {word}
          </div>
        ))}
      </div>

      {/* –°–æ–±—Ä–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (–¥—Ä–æ–ø –∑–æ–Ω–∞) */}
      <div
        onDrop={handleDrop}
        onDragOver={handleDragOver}
        className="flex flex-wrap gap-2 min-h-[50px] border p-3 rounded bg-gray-50"
      >
        {selectedWords.length === 0 && (
          <i>–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Å—é–¥–∞ —Å–ª–æ–≤–∞, —á—Ç–æ–±—ã —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</i>
        )}

        {selectedWords.map((word, i) => (
          <div
            key={i}
            draggable
            onDragStart={(e) => handleDragStart(e, word, "selected")}
            onDrop={(e) => handleDropOnSelected(e, i)}
            onDragOver={handleDragOver}
            className="cursor-move bg-blue-300 px-3 py-1 rounded select-none relative"
          >
            {word}
            <button
              onClick={() => removeWord(word)}
              className="absolute top-0 right-0 text-xs font-bold text-red-700 px-1"
              type="button"
              aria-label="–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ"
            >
              √ó
            </button>
          </div>
        ))}
      </div>

      <div className="flex space-x-2 mt-4">
        <button
          onClick={() => {
            setSelectedWords([]);
            setShuffledWords(shuffleArray(sentence.words));
          }}
          className="bg-yellow-400 px-4 py-2 rounded"
        >
          –°–±—Ä–æ—Å–∏—Ç—å
        </button>
        <button
          onClick={handleSubmit}
          className="bg-green-600 text-white px-4 py-2 rounded"
        >
          –ü—Ä–æ–≤–µ—Ä–∏—Ç—å
        </button>
      </div>
    </div>
  );
}
