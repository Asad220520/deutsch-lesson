import React, { useEffect, useState } from "react";
import WordList from "../components/word/wordList";
import { collection, getDocs, doc, updateDoc } from "firebase/firestore";
import { db } from "../firebase";

const WordPage = () => {
  const [words, setWords] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchAllWords = async () => {
      const lessonsSnapshot = await getDocs(collection(db, "lessons"));
      let allWords = [];

      lessonsSnapshot.forEach((docSnap) => {
        const lesson = docSnap.data();
        const lessonId = docSnap.id;

        if (Array.isArray(lesson.words)) {
          const wordsWithMeta = lesson.words.map((word, index) => ({
            ...word,
            id: `${lessonId}_${index}`, // —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id –¥–ª—è —Å–ª–æ–≤–∞
            lessonId: lessonId,
            lessonNumber: lesson.lessonNumber || "?",
            status: word.status || "learn", // –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ—Ç, –∑–∞–¥–∞—ë–º learn –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
          }));
          allWords = [...allWords, ...wordsWithMeta];
        }
      });

      setWords(allWords);
      setLoading(false);
    };

    fetchAllWords();
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–ª–æ–≤–∞ –≤ –±–∞–∑–µ –∏ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
  const handleStatusChange = async (wordId, lessonId, index, newStatus) => {
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
      setWords((prevWords) =>
        prevWords.map((w) =>
          w.id === wordId ? { ...w, status: newStatus } : w
        )
      );

      // –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫ –∏–∑ Firestore
      const lessonRef = doc(db, "lessons", lessonId);
      const lessonSnap = await getDocs(lessonRef);

      const lessonDoc = await lessonRef.get(); // –∑–∞–º–µ–Ω–∏–º getDocs –Ω–∞ get() –¥–ª—è –æ–¥–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
      if (!lessonDoc.exists()) {
        console.error("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return;
      }
      const lessonData = lessonDoc.data();
      const wordsArray = lessonData.words || [];

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω—É–∂–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –≤ –º–∞—Å—Å–∏–≤–µ
      const newWordsArray = wordsArray.map((w, i) =>
        i === index ? { ...w, status: newStatus } : w
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å–ª–æ–≤ –≤ Firestore
      await updateDoc(lessonRef, {
        words: newWordsArray,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–ª–æ–≤–∞:", error);
    }
  };

  if (loading) return <p className="text-center mt-4">–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤...</p>;

  return (
    <div className="max-w-4xl mx-auto p-6">
      <h1 className="text-2xl font-bold mb-4">üß† –í—Å–µ —Å–ª–æ–≤–∞ –∏–∑ —É—Ä–æ–∫–æ–≤</h1>
      <WordList words={words} onStatusChange={handleStatusChange} />
    </div>
  );
};

export default WordPage;
